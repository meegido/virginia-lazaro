.blur {
    filter: blur(5px) grayscale(10%);
  }
  
.contrast {
  filter: brightness(90%);
  filter: contrast(400%);
}

.saturate {
  filter: saturate(500%);
}

.hue {
  filter: hue-rotate(270deg);
}

.invert {
  filter: invert(100%);
}

@mixin info($direction, $align) {
  display: flex;
  flex-direction: $direction;
  justify-content: $align;
}
  
.category-article {
  &:first-child {
    border-top: 1px solid black;
  }
  
  .article-title {
    height: auto;
    margin: .5em 0 .2em;
  }
  
  .article-info {
    @include info(row, space-between);

    .media {
      margin: .5em 0;
    }
    .date {
      font-family: 'New York Extra Large Regular Italic';
      font-weight: 100;
      font-size: 0.8rem;
      text-align: left;
    }
  }
  
  .article-image {
    background-size: cover;
    background-repeat: no-repeat;
    border-radius: 0.2em;
    padding-top: 75%;
  }
}

@media only screen and (min-width: 25em) and (orientation: landscape) {
  .category-article {
    &:nth-child(2) {
      border-top: 1px solid black;
    }
  }
}

@media only screen and (min-width: 48em) and (orientation: portrait) {
  .category-article {
    &:nth-child(2) {
      border-top: 1px solid black;
    }
  }
}

@media only screen and (min-width: 64em) and (orientation: landscape) {
  .category-article {

    // &:first-child {
    //  width: 83%;
    //  height: 10%; 
    // }

    // &:nth-child(2) {
    //   width: 100%; 
    //   height: 100%;
    //  }

    //  &:nth-child(3) {
    //   width: 43%; 
    //   height: 100%;
    //  }
    
  }
}

@media only screen and (min-width: 90em) {
  .category-article {
    $width: 70%, 100%, 70%, 75%, 70%, 100%, 60%, 100%;
    $height: 16%, 50%, 60%;
    $justify: start, end, start, end, end, end;
    
    @for $i from 1 through length($width) {
      &:nth-child(#{length($width)}n+#{$i}) {
          width: nth($width, $i)
      }
    }
    @for $i from 1 through length($height) {
      &:nth-child(#{length($height)}n+#{$i}) {
          height: nth($height, $i)
      }
    }

    @for $i from 1 through length($justify) {
      &:nth-child(#{length($justify)}n+#{$i}) {
        justify-self: nth($justify, $i)
      }
    }
 
  }
}

//https://medium.com/@andybarefoot/a-masonry-style-layout-using-css-grid-8c663d355ebb
